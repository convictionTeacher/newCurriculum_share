// ===================================
// 提出課題 - Step1: 変数・データ型・演算子
// ===================================

// このファイルは提出課題用です
// すべての課題を完成させて、このファイルを提出してください

// ===================================
// Step1: 文字列変数の作成
// ===================================

// L1-S1-1: ブログタイトル
// 変数名`blogTitle`に「初心者向けプログラミング入門」を保存し、コンソールに表示
// ここにコードを書いてください

// L1-S1-2: ニュースタイトル
// 変数名`newsTitle`に「新商品発売のお知らせ」を保存し、コンソールに表示
// ここにコードを書いてください

// ===================================
// Step2: 数値変数の作成
// ===================================

// L1-S2-1: いいね数
// 変数名`likes`に数値の42を保存し、コンソールに表示
// ここにコードを書いてください

// L1-S2-2: 閲覧数
// 変数名`views`に数値の1500を保存し、コンソールに表示
// ここにコードを書いてください

// ===================================
// Step3: データ型の理解
// ===================================

// L1-S3-1: typeof演算子
// 上で作成した変数`blogTitle`と`likes`の型をtypeof演算子で確認
// logWithLabel関数を使って表示してみよう
// 例: logWithLabel('blogTitleの型', typeof blogTitle);
// ここにコードを書いてください

// L1-S3-2: 型の確認
// 数値と文字列を組み合わせた時の型を確認してみよう
// 例: let mixedValue = "Age: " + 25;
// この値と型をコンソールに表示
// ここにコードを書いてください

// ===================================
// Step4: データ型の応用
// ===================================

// L1-S4-1: 真偽値（boolean）
// ログイン状態やフラグ管理に使用されるtrue/falseを体験しよう
// 変数名は適切な名前を考えて決めてください（例: isLoggedIn, hasPermission など）
// trueとfalseを保存し、それぞれの型を確認してコンソールに表示
// ここにコードを書いてください

// L1-S4-2: undefined・null
// 初期化されていない値や意図的な空の値を体験しよう
// 変数名は適切な名前を考えて決めてください
// undefinedとnullを保存し、それぞれの型を確認してコンソールに表示
// ここにコードを書いてください

// ===================================
// Step5: 算術演算子
// ===================================

// L1-S5-1: 基本演算（+, -, *, /）
// 価格計算や割引計算に使用される基本的な演算を体験しよう
// 変数名は適切な名前を考えて決めてください
// 例: 商品価格2000円、送料500円の合計、割引計算など
// 計算結果とその計算式をコンソールに表示
// ここにコードを書いてください

// L1-S5-2: 余り演算（%）
// 偶数・奇数判定やページネーションなどに使用される余り演算を体験しよう
// 変数名は適切な名前を考えて決めてください
// 例: 17 % 5の結果、数値が偶数かどうかの判定など
// 計算結果をコンソールに表示
// ここにコードを書いてください

// ===================================
// Step6: 代入演算子
// ===================================

// L1-S6-1: 複合代入（+=, -=）
// カウンター更新や値の累積に使用される複合代入演算子を体験しよう
// 変数名は適切な名前を考えて決めてください
// 例: スコアに10点を加算、在庫数から5個を減算など
// 演算前後の値をコンソールに表示
// ここにコードを書いてください

// L1-S6-2: 複合代入（*=, /=）
// 倍率計算や割り算に使用される複合代入演算子を体験しよう
// 変数名は適切な名前を考えて決めてください
// 例: 価格を1.1倍（10%増し）、数量を半分にするなど
// 演算前後の値をコンソールに表示
// ここにコードを書いてください

// ===================================
// Step7: 比較演算子
// ===================================

// L1-S7-1: 等価比較（==, ===）
// 年齢確認、価格比較、ランキング判定などに使用される等価比較を体験しよう
// 変数名は適切な名前を考えて決めてください
// 例: "5" == 5 と "5" === 5 の違いなど
// 比較結果をコンソールに表示
// ここにコードを書いてください

// L1-S7-2: 大小比較（>, <, >=, <=）
// 条件判定に使用される大小比較を体験しよう
// 変数名は適切な名前を考えて決めてください
// 例: 年齢制限チェック、価格比較など
// 比較結果をコンソールに表示
// ここにコードを書いてください

// ===================================
// Step8: 文字列結合と演算子
// ===================================

// L1-S8-1: 文字列の結合（+演算子）
// メッセージ生成、表示テキスト作成に使用される文字列結合を体験しよう
// 変数名は適切な名前を考えて決めてください
// 例: 挨拶 + ユーザー名の結合など
// 結合結果をコンソールに表示
// ここにコードを書いてください

// L1-S8-2: 数値と文字列の結合
// ラベルと数値の結合表示を体験しよう
// 変数名は適切な名前を考えて決めてください
// 例: 「商品名: 」 + 商品名、「価格: 」 + 価格 + 「円」など
// 結合結果をコンソールに表示
// ここにコードを書いてください

// ===================================
// Step9: テンプレートリテラル記法
// ===================================

// L1-S9-1: テンプレートリテラルの基本
// 動的なHTML生成、複雑な文字列作成に使用されるテンプレートリテラルを体験しよう
// 変数名は適切な名前を考えて決めてください
// 例: 商品情報、ユーザープロフィールなど
// バッククォート`と${}を使って文字列を作成し、コンソールに表示
// ここにコードを書いてください

// L1-S9-2: 変数埋め込み（${}）
// 複数の変数を組み合わせたテンプレートリテラルを体験しよう
// 変数名は適切な名前を考えて決めてください
// 例: `動画: ${title}（${duration}分）`など
// 作成した文字列をコンソールに表示
// ここにコードを書いてください

// ===================================
// Step10: 総合演習
// ===================================

// L1-S10-1: 複合計算と型変換
// 変数・データ型・演算子の組み合わせを活用した複合的な処理を体験しよう
// 変数名は適切な名前を考えて決めてください
// 例: 文字列の数値を数値型に変換して計算、計算結果を文字列で表示など
// 型変換前後の型と値をコンソールに表示
// ここにコードを書いてください

// L1-S10-2: 実用的なデータ処理
// 実際のアプリケーション開発で使用されるようなデータ処理を体験しよう
// 変数名は適切な名前を考えて決めてください
// 例: ショップの注文状況計算、ユーザー情報の整理など
// これまで学んだ内容を組み合わせて処理し、結果をコンソールに表示
// ここにコードを書いてください

// ===================================
// 提出前チェックリスト
// ===================================

/*
□ すべてのステップが完成している
□ 変数名は適切で分かりやすい名前を使用している
□ コンソール出力で結果を確認できる
□ エラーが発生していない
□ コメントで説明が書かれている

完成したら、このファイル（curriculum.js）を提出してください。
*/
